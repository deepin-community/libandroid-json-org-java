Index: 20180130/src/main/java/org/json/JSONException.java
===================================================================
--- 20180130.orig/src/main/java/org/json/JSONException.java
+++ 20180130/src/main/java/org/json/JSONException.java
@@ -41,7 +41,7 @@ package org.json;
  *     }
  * }</pre>
  */
-public class JSONException extends Exception {
+public class JSONException extends RuntimeException {
 
     public JSONException(String s) {
         super(s);
Index: 20180130/src/main/java/org/json/JSONArray.java
===================================================================
--- 20180130.orig/src/main/java/org/json/JSONArray.java
+++ 20180130/src/main/java/org/json/JSONArray.java
@@ -18,6 +18,7 @@ package org.json;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 
 // Note: this class was written without inspecting the non-free org.json sourcecode.
@@ -44,7 +45,7 @@ import java.util.List;
  * <i>Effective Java</i> Item 17, "Design and Document or inheritance or else
  * prohibit it" for further information.
  */
-public class JSONArray {
+public class JSONArray implements Iterable<Object> {
 
     private final List<Object> values;
 
@@ -103,6 +104,11 @@ public class JSONArray {
         this(new JSONTokener(json));
     }
 
+    @Override
+    public Iterator<Object> iterator() {
+        return this.values.iterator();
+    }
+
     /**
      * Returns the number of values in this array.
      */
Index: 20180130/src/main/java/org/json/JSONTokener.java
===================================================================
--- 20180130.orig/src/main/java/org/json/JSONTokener.java
+++ 20180130/src/main/java/org/json/JSONTokener.java
@@ -83,6 +83,15 @@ public class JSONTokener {
         this.in = in;
     }
 
+    private static String _helper(java.util.Scanner s) {
+        return s.hasNext() ? s.next() : "";
+    }
+
+    public JSONTokener(java.io.InputStream is) {
+        // trick from https://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string
+        this(is == null ? null : _helper(new java.util.Scanner(is).useDelimiter("\\A")));
+    }
+
     /**
      * Returns the next value from the input.
      *
Index: 20180130/src/test/java/org/json/JSONTokenerTest.java
===================================================================
--- 20180130.orig/src/test/java/org/json/JSONTokenerTest.java
+++ 20180130/src/test/java/org/json/JSONTokenerTest.java
@@ -26,78 +26,78 @@ public class JSONTokenerTest extends Tes
 
     public void testNulls() throws JSONException {
         // JSONTokener accepts null, only to fail later on almost all APIs!
-        new JSONTokener(null).back();
+        new JSONTokener((String)null).back();
 
         try {
-            new JSONTokener(null).more();
+            new JSONTokener((String)null).more();
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).next();
+            new JSONTokener((String)null).next();
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).next(3);
+            new JSONTokener((String)null).next(3);
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).next('A');
+            new JSONTokener((String)null).next('A');
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).nextClean();
+            new JSONTokener((String)null).nextClean();
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).nextString('"');
+            new JSONTokener((String)null).nextString('"');
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).nextTo('A');
+            new JSONTokener((String)null).nextTo('A');
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).nextTo("ABC");
+            new JSONTokener((String)null).nextTo("ABC");
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).nextValue();
+            new JSONTokener((String)null).nextValue();
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).skipPast("ABC");
+            new JSONTokener((String)null).skipPast("ABC");
             fail();
         } catch (NullPointerException e) {
         }
 
         try {
-            new JSONTokener(null).skipTo('A');
+            new JSONTokener((String)null).skipTo('A');
             fail();
         } catch (NullPointerException e) {
         }
 
         assertEquals("foo! at character 0 of null",
-                new JSONTokener(null).syntaxError("foo!").getMessage());
+                new JSONTokener((String)null).syntaxError("foo!").getMessage());
 
-        assertEquals(" at character 0 of null", new JSONTokener(null).toString());
+        assertEquals(" at character 0 of null", new JSONTokener((String)null).toString());
     }
 
     public void testEmptyString() throws JSONException {
